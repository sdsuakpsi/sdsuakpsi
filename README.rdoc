== README
https://docs.google.com/document/d/1Y_q3xkiLoWFvHDgKHu9mp8j6Tu9ZWayKKPIphxCknTo/edit?usp=sharing

SDSU AKPsi Website Comprehensive Guide
Developer: Arthur Pan, arthurpan24@gmail.com, (408) 431-8058, UCSB AKPsi
Updated 4/6/18
--------------------------------------------------------------------------------------------------------------------------------

Index
Basic Information
Advice
How it was built
How to get the code
Heroku
Github
How to update the website
Brother photos
Cover photos
Text content
Github commands
Useful commands
About the code
Code structure
Item directory
Hovering picture effect

Basic Information
Advice
When you first pull the code from Github, you might be overwhelmed by all the files and content. While it may look confusing at first, there are only a few main files necessary to update most of the website functionality. Although I will give specific instructions on how to update the website, sometimes things may still not work out the first time around. My advice is to try to understand HTML/CSS first -- the programming for HTML/CSS is straightforward, and you definitely don’t need a computer science degree to learn how to use these two languages. There is a plethora of resources for learning HTML/CSS online.

It may be helpful to edit the website in an external text editor such as Sublime or Atom. These editors are free and can be downloaded online. Both programs have “premium” products, but the free application is more than sufficient for our purposes. Using these external text editors will allow you to navigate across files easily. If you ever forget where to find certain files, you can do a file-wide search with command + shift + f.

Programming, even with HTML/CSS, can be frustrating and requires patience. If you ever have any blocking questions, please do not hesitate to drop an email or text. I will try to answer questions as fast as I can or help update things if you cannot figure it out.

How it was built
Framework: Ruby on Rails
Database: Postgres
Front End: HTML5, CSS, Javascript

Note: In conforming to Ruby on Rails, html files are suffixed by .erb and CSS files are suffixed by .sass. The formatting for .sass CSS files are a little bit different but can be googled. The formatting for .erb html files are very similar to normal HTML files, but allow inline tagging such as <%= yield %>. For all purposes, just ignore the .erb and treat them like normal html files.

C. 	How to get the code -- setting up the environment
You need to download two applications: Github and Atom.
Downloading the Github desktop application will make it easy for you to manage pushing and pulling files to Github (described below).
Downloading the Atom application will make it easy for you to navigate through the content and edit code.

Before you pull the code onto your computer, you should first create a folder to contain it. Create a folder where you can find and name it “akpsisdsu” (or anything you would like).

When you first sign into the Github desktop application, click on “clone a repository”. Click on the “akpsisdsu” repository, and change the Local Path to wherever you created the akpsisdsu folder in the step above.

Once the code is cloned to your computer, you can open it up with Atom. Open the entire akpsisdsu folder. You should see all the folders that are listed below in 	Code Structure.

If this is the first time you are pulling the code, you must also set up the necessary environment for code development with Ruby on Rails. You will need to download Ruby on Rails, as well as Ruby. Do the first 3 steps (only up to step 3.2) as seen here. Ruby and Ruby on Rails is necessary on your local computer ot test local changes and to precompile assets, such as photos, before they are reflected on the actual website.

D. 	Heroku
The website is hosted through Heroku (www.heroku.com). Heroku takes the code for the website and packages it together in a way that can be hosted online. Whenever you make changes to the code, you must ultimately push the changes onto Heroku so that the changes can be reflected online.

Username: ~~~~~
Password: ~~~~~

E.  	Github
Github is the resource used for version control -- which is better understood as a Google Drive for code. It is an online storage that allows you to keep your code for easy access. Github may be hard to understand at first -- code for a project is stored in so-called “repositories”. You need to “clone” the code for the application to your computer in order to edit content. When you are done editing, you must “push” changes back onto Github. Once changes are pushed to Github, you can then “push” the changes onto Heroku, which will then reflect on the live website.

With the Github desktop app, pushing changes on to master is very easy. Once changes are made, check the desktop app and it will display all the changes you have made. Write a summary, and a description if you want, and then hit “Commit to master”. Committing to master is the same as “saving” your changes on Google Drive.

Reading and understanding Github is worth the effort. I would look up a Youtube video about what it is to gain a better understanding. In the steps to update, I will do my best to make it clear exactly how to navigate the Github commands.

Username: arthurpan24@gmail.com
Password: ~~~~~

How to Update the Website
Brother Photos
Cover Photos
Text Content
Github Commands
Useful Commands
About the Code
Code Structure
The website is built on top of the Ruby on Rails Framework. Basically, Ruby on Rails provides a way for you to put front end code, such as HTML and CSS, in an understandable structure. It allows the code to be displayed and navigable like it is on the website.

All Ruby on Rails applications, such as the SDSU website, is broken up into the following folders:
app
This folder contains pretty much everything relevant to the website. If you navigate into the folder, you will see much more subfolders.

The assets folder contains all the pictures we use on the website, as well as javascript files and stylesheets (CSS files, in our case .sass files). While javascript is used, it is not necessarily important in updating the website. The stylesheets, on the other hand, give our application its form. _style.sass and _foundation.sass lay down the CSS necessary in making our application look like how it does.

The controllers folder contains

bin
		This folder is necessary but irrelevant to updating the website.

config
There is one specific file in this folder that is relevant: routes.rb. The routes.rb file sets what specific URLs link to for the user. For example, the following line of code defines how our application should treat the URL: www.akpsisdsu.com/brothers

get '/brothers' => 'home#brothers'

The base URL for our entire application is www.akpsidsu.com. If the user requests for /brothers, the line of code redirects our application to the brothers file in our home folder, which lives in the app folder, as described above. If you wanted to add more web pages, you would need to create a new HTML file and redirect the route in the routes.rb file.

db
This folder contains files necessary for the database. This will not need to be touched at any specific point. If someone wants to develop new functionality for the website that involves storage of data in a database, the files will appear here.

lib
		Not used in our application

log
Not used in our application

public
Leave this untouched. When you precompile assets, assets such as pictures will be automatically added in the folder.

test
Not used in the application. This folder is meant to be used for test scripts.

tmp
Not used in the application.

vendor
Not used in the application.

Gemfile: This file is used to list out all third-party helper libraries used to add functionality to the website. It is very important but can be left alone unless you want to add more functionality. For example, the gemfile contains libraries used to help with sending emails.

Item directory
Brother pictures: ../app/assets/images/brothers/composite/..
Brother picture definitions: ../app/assets/stylesheets/_style.sass
Brother LinkedIn definitions: ../app/controllers/home_controller.rb

Hovering picture effect
On the website, each brother picture is a side-by-side (left side is serious, right side is goofy) jpg that is 400 x 200. Each brother picture, in reality, is shown to be 200x200 on the website. When the user hovers over the picture, the CSS shifts the offset of the jpg exactly 200 pixels so that the goofy side is shown. When the user unhovers, the CSS shifts the offset of the jpg back to its original.

This is kinda hacky, but does the job. If any future developer wants to experiment with javascript, it might be more elegant.
